{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortFieldValues","goodsFromServer","App","useState","sortType","default","reverse","listObserver","setListObserver","isResetButton","preparedGoods","goods","result","sort","good1","good2","abc","localeCompare","length","getPreparedGoods","handleSort","prevState","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,iFAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,kBAAAA,E,gBAAAA,E,sBAAAA,M,KAwCE,IAAME,EAAgB,WAC3B,MAAwCC,mBAA4B,CAClEC,SAAUJ,EAAgBK,QAC1BC,SAAS,IAFX,mBAAOC,EAAP,KAAqBC,EAArB,KAKMC,EAAgBF,EAAaH,WAAaJ,EAAgBK,SAC3DE,EAAaD,QAEZI,EAtCR,SACEC,EACAP,EACAE,GAEA,IAAIM,EAAM,YAAOD,GAqBjB,OAnBIP,GACFQ,EAAOC,MAAK,SAACC,EAAOC,GAClB,OAAQX,GACN,KAAKJ,EAAgBgB,IACnB,OAAOF,EAAMG,cAAcF,GAE7B,KAAKf,EAAgBkB,OACnB,OAAOJ,EAAMI,OAASH,EAAMG,OAE9B,QACE,OAAO,MAKXZ,IACFM,EAASA,EAAON,WAGXM,EAYeO,CACpBlB,EACAM,EAAaH,SACbG,EAAaD,SAGTc,EAAa,SAAChB,GAAD,OAA+B,WAChDI,GAAgB,SAAAa,GAAS,kCACpBA,GADoB,IAEvBjB,kBAiBJ,OACE,sBAAKkB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CAAE,WAAYjB,EAAaH,WAAaJ,EAAgBgB,MAE1DS,QAASL,EAAWpB,EAAgBgB,KANtC,iCAWA,wBACEO,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,WAAYjB,EAAaH,WAAaJ,EAAgBkB,SAE1DO,QAASL,EAAWpB,EAAgBkB,QANtC,4BAWA,wBACEK,KAAK,SACLD,UAAWE,IACT,oBACA,CAAE,YAAajB,EAAaD,UAE9BmB,QA5Cc,WACpBjB,GAAgB,SAAAa,GAAS,kCAClBA,GADkB,IACPf,SAAUe,EAAUf,cAoClC,qBAWCG,GACC,wBACEc,KAAK,SACLD,UAAU,4BACVG,QA/CU,WAClBjB,EAAgB,CACdJ,SAAUJ,EAAgBK,QAC1BC,SAAS,KAyCL,sBAUJ,6BACGI,EAAcgB,KAAI,SAAAC,GAAI,OACrB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YC3InBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f7341987.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortFieldValues {\n  default = 'default',\n  length = 'length',\n  abc = 'alphabetically',\n}\n\ninterface ListObserverState {\n  sortType: SortFieldValues;\n  reverse: boolean;\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortType: SortFieldValues,\n  reverse: boolean,\n) {\n  let result = [...goods];\n\n  if (sortType) {\n    result.sort((good1, good2) => {\n      switch (sortType) {\n        case SortFieldValues.abc:\n          return good1.localeCompare(good2);\n\n        case SortFieldValues.length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    result = result.reverse();\n  }\n\n  return result;\n}\n\nexport const App: React.FC = () => {\n  const [listObserver, setListObserver] = useState<ListObserverState>({\n    sortType: SortFieldValues.default,\n    reverse: false,\n  });\n\n  const isResetButton = listObserver.sortType !== SortFieldValues.default\n    || listObserver.reverse;\n\n  const preparedGoods = getPreparedGoods(\n    goodsFromServer,\n    listObserver.sortType,\n    listObserver.reverse,\n  );\n\n  const handleSort = (sortType: SortFieldValues) => () => {\n    setListObserver(prevState => ({\n      ...prevState,\n      sortType,\n    }));\n  };\n\n  const handleReverse = () => {\n    setListObserver(prevState => (\n      { ...prevState, reverse: !prevState.reverse }\n    ));\n  };\n\n  const handleReset = () => {\n    setListObserver({\n      sortType: SortFieldValues.default,\n      reverse: false,\n    });\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            { 'is-light': listObserver.sortType !== SortFieldValues.abc },\n          )}\n          onClick={handleSort(SortFieldValues.abc)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            { 'is-light': listObserver.sortType !== SortFieldValues.length },\n          )}\n          onClick={handleSort(SortFieldValues.length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            { 'is-light': !listObserver.reverse },\n          )}\n          onClick={handleReverse}\n        >\n          Reverse\n        </button>\n\n        {isResetButton && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {preparedGoods.map(good => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}